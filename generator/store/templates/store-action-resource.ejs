import { Module } from 'vuex';
import { RootState } from '@/app/app.store';
import { apiHttpClient } from ' @/app/app.service';
<% if (resourceType === 'Array') { %>
export interface <%= resourceItemType %> {
  data: null;
}

export type <%= resourceTypeName %> = Array<<%= resourceItemType %>>;<% } else { %>
export interface <% resourceTypeName %> {
  data: null;
}<% } %>

export interface <%= storeStateName %> {
  loading: boolean;
  <%= resourceName %>: <%= resourceTypeName %> | null;
}

export const <%= storeModuleName %>: Module<<%= storeStateName %>, RootState> = {
  /**
   * 命名空间
   */
  namespaced: true,

  /**
   * 数据
   */
  state: {
    loading: false,
    <%= resourceName %>: null,
  } as <%= storeStateName %>,

  /**
   * 获取器
   */
  getters: {
    loading(state) {
      return state.loading;
    },

    <%= resourceName %>(state) {
      return state.<%= resourceName %>;
    }
  },

  /**
   * 修改器
   */
  mutations: {
    setLoading(state, data) {
      state.loading = data;
    },

    set<%= resourceNameCapitalize %>(state, data) {
      state.<%= resourceName %> = data;
    }
  },

  /**
   * 动作
   */
  actions: {
    async <%= action %>({ commit }) {
      commit('setLoading', true);

      try {
        const response = await apiHttpClient.<%= method %>(`<%= api %>`);
        commit('set<%= resourceNameCapitalize %>', response.data);
        commit('setLoading', false);

        return response;
      } catch (error) {
        commit('setLoading', false);

        throw error.response;
      }
    },    
  },

  /**
   * 模块
   */
  modules: {
  },
};
